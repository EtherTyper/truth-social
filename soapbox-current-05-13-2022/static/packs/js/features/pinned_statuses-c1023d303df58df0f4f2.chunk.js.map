{"version":3,"file":"packs/js/features/pinned_statuses-c1023d303df58df0f4f2.chunk.js","mappings":"+JAAiIA,EAAOC,E,qkBAA0gBC,GAAS,QAAe,CAACC,QAAQ,CAAC,GAAK,cAAc,eAAiB,kBAAyXC,GAAqB,SAAtW,SAACC,EAAMC,GAAY,IAAmBC,EAAXD,EAAI,OAAuBC,UAAU,GAASC,EAAGH,EAAMI,IAAI,MAAYC,EAAWL,EAAMM,MAAM,CAAC,WAAWH,EAAG,YAAY,IAAI,MAAM,CAACI,YAAYL,EAASM,gBAAgBH,EAAWG,cAAcC,UAAUT,EAAMM,MAAM,CAAC,eAAe,OAAO,UAAUI,UAAUV,EAAMM,MAAM,CAAC,eAAe,OAAO,YAA8DK,CAAKhB,GAAO,SAAmBC,EAAO,YAAC,a,+CAAqhB,OAAxf,OAAuB,YAAAgB,kBAAA,WAAoBC,KAAKC,MAAMC,UAAS,YAAwB,YAAAC,OAAA,WAAc,MAAqCH,KAAKC,MAAzCG,EAAI,OAACR,EAAS,YAACC,EAAO,UAAyB,OAAb,eAA+F,OAAK,IAAO,CAACQ,MAAMD,EAAKE,cAActB,EAASC,eAAU,GAAoB,OAAK,IAAW,CAACW,UAAUA,EAAUW,UAAU,kBAAkBV,QAAQA,EAAQW,cAA0B,OAAK,IAAiB,CAACC,GAAG,uBAAuBC,eAAe,yBAAtS,OAAK,IAAiB,KAAyS,EAAthB,CAA8B,OAA0f,OAAgB3B,EAAQ,YAAY,CAACmB,SAAS,oBAA0BN,UAAU,0BAAyCQ,KAAK,sBAA4BP,QAAQ,oBAA0BH,YAAY,sBAAjvBZ,EAA6wBC,KAAWD,IAASA","sources":["webpack://soapbox-fe/./app/soapbox/features/pinned_statuses/index.js"],"sourcesContent":["import _jsx from\"@babel/runtime/helpers/esm/jsx\";import _defineProperty from\"@babel/runtime/helpers/esm/defineProperty\";var _dec,_class,_class2;import PropTypes from'prop-types';import React from'react';import ImmutablePropTypes from'react-immutable-proptypes';import ImmutablePureComponent from'react-immutable-pure-component';import{defineMessages,injectIntl,FormattedMessage}from'react-intl';import{connect}from'react-redux';import MissingIndicator from'soapbox/components/missing_indicator';import{fetchPinnedStatuses}from'../../actions/pin_statuses';import StatusList from'../../components/status_list';import Column from'../ui/components/column';const messages=defineMessages({heading:{\"id\":\"column.pins\",\"defaultMessage\":\"Pinned posts\"}});const mapStateToProps=(state,_ref)=>{let{params}=_ref;const username=params.username||'';const me=state.get('me');const meUsername=state.getIn(['accounts',me,'username'],'');return{isMyAccount:username.toLowerCase()===meUsername.toLowerCase(),statusIds:state.getIn(['status_lists','pins','items']),hasMore:!!state.getIn(['status_lists','pins','next'])};};let PinnedStatuses=(_dec=connect(mapStateToProps),_dec(_class=injectIntl(_class=(_class2=class PinnedStatuses extends ImmutablePureComponent{componentDidMount(){this.props.dispatch(fetchPinnedStatuses());}render(){const{intl,statusIds,hasMore,isMyAccount}=this.props;if(!isMyAccount){return/*#__PURE__*/_jsx(MissingIndicator,{});}return/*#__PURE__*/_jsx(Column,{label:intl.formatMessage(messages.heading)},void 0,/*#__PURE__*/_jsx(StatusList,{statusIds:statusIds,scrollKey:\"pinned_statuses\",hasMore:hasMore,emptyMessage:/*#__PURE__*/_jsx(FormattedMessage,{id:\"pinned_statuses.none\",defaultMessage:\"No pins to show.\"})}));}},_defineProperty(_class2,\"propTypes\",{dispatch:PropTypes.func.isRequired,statusIds:ImmutablePropTypes.orderedSet.isRequired,intl:PropTypes.object.isRequired,hasMore:PropTypes.bool.isRequired,isMyAccount:PropTypes.bool.isRequired}),_class2))||_class)||_class);export{PinnedStatuses as default};"],"names":["_class","_class2","messages","heading","PinnedStatuses","state","_ref","username","me","get","meUsername","getIn","isMyAccount","toLowerCase","statusIds","hasMore","_dec","componentDidMount","this","props","dispatch","render","intl","label","formatMessage","scrollKey","emptyMessage","id","defaultMessage"],"sourceRoot":""}