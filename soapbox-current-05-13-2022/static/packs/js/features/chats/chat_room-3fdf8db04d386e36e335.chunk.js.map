{"version":3,"file":"packs/js/features/chats/chat_room-3fdf8db04d386e36e335.chunk.js","mappings":"+JAAiIA,EAAOC,E,+kBAAg3BC,GAAe,SAAhP,SAACC,EAAMC,GAAY,IAAAC,EAAQD,EAAI,OAAOE,GAAQ,UAAoBC,EAAKJ,EAAMK,MAAM,CAAC,QAAQ,QAAQH,EAAOI,SAAQ,YAAgBC,OAAO,MAAM,CAACC,GAAGR,EAAMS,IAAI,MAAML,KAAKD,EAAQH,EAAMI,GAAMM,YAAW,QAAWV,MAAsDW,CAAKd,GAAO,SAAmBC,EAAO,YAA+C,gCAAuBc,YAAS,K,OAAE,OAAgB,EAAK,kBAAiB,SAAAC,GAAK,EAAKC,UAAUD,EAAG,EAAKE,iBAAgB,OAAgB,EAAK,cAAa,WAAS,EAAKD,WAAiB,EAAKA,UAAUE,YAAW,OAAgB,EAAK,YAAW,WAAU,MAAgB,EAAKC,MAApBC,EAAQ,WAACd,EAAI,OAAiBA,GAAYc,GAAS,QAAad,EAAKK,IAAI,W,EAA2iB,OAAr4B,OAAsW,YAAAU,kBAAA,WAAyB,MAAkBC,KAAKH,MAAtBC,EAAQ,WAAChB,EAAM,SAAagB,GAAS,QAAUhB,EAAOI,SAASc,KAAKC,YAAY,YAAAC,mBAAA,SAAmBC,GAAnB,WAAuD,CAAC,WAAI,SAAKN,MAAMb,MAAK,WAAI,SAAKa,MAAMb,KAAKK,IAAI,UAAU,IAAyBe,OAAM,SAAAC,GAAG,OAAAA,QAAKL,KAAKC,YAAY,YAAAK,OAAA,WAAc,MAAkBN,KAAKH,MAAtBb,EAAI,OAACM,EAAU,aAAa,IAAIN,EAAK,OAAO,KAAK,IAAMuB,EAAQvB,EAAKK,IAAI,WAAW,OAAmB,OAAK,KAAO,CAACmB,MAAM,IAAIC,QAAO,QAAQF,EAAQjB,UAAc,GAAoB,OAAK,IAAQ,CAACJ,OAAOF,EAAKK,IAAI,MAAMqB,cAAcV,KAAKW,mBAAmB,EAA75B,CAAwB,OAAu4B,OAAgBjC,EAAQ,YAAY,CAACoB,SAAS,oBAA0Bc,KAAK,sBAA4B5B,KAAK,QAAuBM,WAAW,SAAeF,GAAG,WAAhlCX,EAAimCC,KAAWD,IAASA","sources":["webpack://soapbox-fe/./app/soapbox/features/chats/chat_room.js"],"sourcesContent":["import _jsx from\"@babel/runtime/helpers/esm/jsx\";import _defineProperty from\"@babel/runtime/helpers/esm/defineProperty\";var _dec,_class,_class2;import\"core-js/modules/web.dom-collections.iterator.js\";import{Map as ImmutableMap}from'immutable';import PropTypes from'prop-types';import React from'react';import ImmutablePropTypes from'react-immutable-proptypes';import ImmutablePureComponent from'react-immutable-pure-component';import{injectIntl}from'react-intl';import{connect}from'react-redux';import{fetchChat,markChatRead}from'soapbox/actions/chats';import{Column}from'soapbox/components/ui';import{makeGetChat}from'soapbox/selectors';import{getAcct}from'soapbox/utils/accounts';import{displayFqn}from'soapbox/utils/state';import ChatBox from'./components/chat_box';const mapStateToProps=(state,_ref)=>{let{params}=_ref;const getChat=makeGetChat();const chat=state.getIn(['chats','items',params.chatId],ImmutableMap()).toJS();return{me:state.get('me'),chat:getChat(state,chat),displayFqn:displayFqn(state)};};let ChatRoom=(_dec=connect(mapStateToProps),_dec(_class=injectIntl(_class=(_class2=class ChatRoom extends ImmutablePureComponent{constructor(){super(...arguments);_defineProperty(this,\"handleInputRef\",el=>{this.inputElem=el;this.focusInput();});_defineProperty(this,\"focusInput\",()=>{if(!this.inputElem)return;this.inputElem.focus();});_defineProperty(this,\"markRead\",()=>{const{dispatch,chat}=this.props;if(!chat)return;dispatch(markChatRead(chat.get('id')));});}componentDidMount(){const{dispatch,params}=this.props;dispatch(fetchChat(params.chatId));this.markRead();}componentDidUpdate(prevProps){const markReadConditions=[()=>this.props.chat,()=>this.props.chat.get('unread')>0];if(markReadConditions.every(c=>c()))this.markRead();}render(){const{chat,displayFqn}=this.props;if(!chat)return null;const account=chat.get('account');return/*#__PURE__*/_jsx(Column,{label:\"@\".concat(getAcct(account,displayFqn))},void 0,/*#__PURE__*/_jsx(ChatBox,{chatId:chat.get('id'),onSetInputRef:this.handleInputRef}));}},_defineProperty(_class2,\"propTypes\",{dispatch:PropTypes.func.isRequired,intl:PropTypes.object.isRequired,chat:ImmutablePropTypes.map,displayFqn:PropTypes.bool,me:PropTypes.node}),_class2))||_class)||_class);export{ChatRoom as default};"],"names":["_class","_class2","ChatRoom","state","_ref","params","getChat","chat","getIn","chatId","toJS","me","get","displayFqn","_dec","arguments","el","inputElem","focusInput","focus","props","dispatch","componentDidMount","this","markRead","componentDidUpdate","prevProps","every","c","render","account","label","concat","onSetInputRef","handleInputRef","intl"],"sourceRoot":""}