{"version":3,"file":"packs/js/features/domain_blocks-e8d71f6646607f168d54.chunk.js","mappings":"oPAAmQA,GAAS,QAAe,CAACC,mBAAmB,CAAC,GAAK,qCAAqC,eAAiB,sBAAsBC,cAAc,CAAC,GAAK,yBAAyB,eAAiB,qBAS8F,EAT5D,SAAAC,GAAW,IAAAC,EAAQD,EAAI,OAAOE,GAAS,UAAoBC,GAAK,EAAAC,EAAA,KAShe,OAAmB,OAAK,MAAM,CAACC,UAAU,eAAU,GAAoB,OAAK,MAAM,CAACA,UAAU,wBAAmB,GAAoB,OAAK,OAAO,CAACA,UAAU,4BAAuB,GAAoB,OAAK,SAAS,QAAG,EAAOJ,KAAsB,OAAK,MAAM,CAACI,UAAU,wBAAmB,GAAoB,OAAK,IAAW,CAACC,QAAO,EAAKC,IAAI,EAAQ,KAAqCC,MAAML,EAAKM,cAAcZ,EAASE,cAAc,CAACE,OAAM,IAAGS,QAAhe,WAAKR,GAAS,QAAcD,W,8BCToe,GAAS,QAAe,CAACU,QAAQ,CAAC,GAAK,uBAAuB,eAAiB,kBAAkBZ,cAAc,CAAC,GAAK,yBAAyB,eAAiB,qBAA2Ba,EAAe,KAAU,SAAAV,GAAWA,GAAS,aAAwB,IAAI,CAACW,SAAQ,IAAu1B,EAA7zB,WAAK,IAAMX,GAAS,UAAoBC,GAAK,EAAAC,EAAA,KAAgBU,GAAQ,SAAe,SAAAC,GAAO,OAAAA,EAAMC,aAAaC,MAAM,CAAC,SAAS,aAAiBC,GAAQ,SAAe,SAAAH,GAAO,QAAEA,EAAMC,aAAaC,MAAM,CAAC,SAAS,YAAmE,GAAzD,aAAgB,WAAKf,GAAS,aAAuB,KAAQY,EAAS,OAAmB,OAAK,IAAO,QAAG,GAAoB,OAAK,KAAQ,KAAM,IAAMK,GAA0B,OAAK,IAAiB,CAACC,GAAG,6BAA6BC,eAAe,qCAAqC,OAAmB,OAAK,IAAO,CAACC,KAAK,eAAeC,MAAMpB,EAAKM,cAAc,EAASE,eAAU,GAAoB,OAAK,IAAe,CAACa,UAAU,gBAAgBC,WAAW,WAAI,OAAAb,EAAeV,IAAUgB,QAAQA,EAAQC,aAAaA,QAAc,EAAOL,EAAQY,KAAI,SAAAzB,GAAqB,cAAK,EAAO,CAACA,OAAOA,GAAQA","sources":["webpack://soapbox-fe/./app/soapbox/components/domain.tsx","webpack://soapbox-fe/./app/soapbox/features/domain_blocks/index.tsx"],"sourcesContent":["import _jsx from\"@babel/runtime/helpers/esm/jsx\";import React from'react';import{defineMessages,useIntl}from'react-intl';import{useDispatch}from'react-redux';import{unblockDomain}from'soapbox/actions/domain_blocks';import IconButton from'./icon_button';const messages=defineMessages({blockDomainConfirm:{\"id\":\"confirmations.domain_block.confirm\",\"defaultMessage\":\"Hide entire domain\"},unblockDomain:{\"id\":\"account.unblock_domain\",\"defaultMessage\":\"Unhide {domain}\"}});const Domain=_ref=>{let{domain}=_ref;const dispatch=useDispatch();const intl=useIntl();// const onBlockDomain = () => {\n//   dispatch(openModal('CONFIRM', {\n//     icon: require('@tabler/icons/icons/ban.svg'),\n//     heading: <FormattedMessage id='confirmations.domain_block.heading' defaultMessage='Block {domain}' values={{ domain }} />,\n//     message: <FormattedMessage id='confirmations.domain_block.message' defaultMessage='Are you really, really sure you want to block the entire {domain}? In most cases a few targeted blocks or mutes are sufficient and preferable.' values={{ domain: <strong>{domain}</strong> }} />,\n//     confirm: intl.formatMessage(messages.blockDomainConfirm),\n//     onConfirm: () => dispatch(blockDomain(domain)),\n//   }));\n// }\nconst handleDomainUnblock=()=>{dispatch(unblockDomain(domain));};return/*#__PURE__*/_jsx(\"div\",{className:\"domain\"},void 0,/*#__PURE__*/_jsx(\"div\",{className:\"domain__wrapper\"},void 0,/*#__PURE__*/_jsx(\"span\",{className:\"domain__domain-name\"},void 0,/*#__PURE__*/_jsx(\"strong\",{},void 0,domain)),/*#__PURE__*/_jsx(\"div\",{className:\"domain__buttons\"},void 0,/*#__PURE__*/_jsx(IconButton,{active:true,src:require('@tabler/icons/icons/lock-open.svg'),title:intl.formatMessage(messages.unblockDomain,{domain}),onClick:handleDomainUnblock}))));};export default Domain;","import _jsx from\"@babel/runtime/helpers/esm/jsx\";import _debounce from\"lodash/debounce\";import React from'react';import{defineMessages,useIntl,FormattedMessage}from'react-intl';import{useDispatch}from'react-redux';import{fetchDomainBlocks,expandDomainBlocks}from'soapbox/actions/domain_blocks';import Domain from'soapbox/components/domain';import ScrollableList from'soapbox/components/scrollable_list';import{Spinner}from'soapbox/components/ui';import{useAppSelector}from'soapbox/hooks';import Column from'../ui/components/column';const messages=defineMessages({heading:{\"id\":\"column.domain_blocks\",\"defaultMessage\":\"Hidden domains\"},unblockDomain:{\"id\":\"account.unblock_domain\",\"defaultMessage\":\"Unhide {domain}\"}});const handleLoadMore=_debounce(dispatch=>{dispatch(expandDomainBlocks());},300,{leading:true});const DomainBlocks=()=>{const dispatch=useDispatch();const intl=useIntl();const domains=useAppSelector(state=>state.domain_lists.getIn(['blocks','items']));const hasMore=useAppSelector(state=>!!state.domain_lists.getIn(['blocks','next']));React.useEffect(()=>{dispatch(fetchDomainBlocks());},[]);if(!domains){return/*#__PURE__*/_jsx(Column,{},void 0,/*#__PURE__*/_jsx(Spinner,{}));}const emptyMessage=/*#__PURE__*/_jsx(FormattedMessage,{id:\"empty_column.domain_blocks\",defaultMessage:\"There are no hidden domains yet.\"});return/*#__PURE__*/_jsx(Column,{icon:\"minus-circle\",label:intl.formatMessage(messages.heading)},void 0,/*#__PURE__*/_jsx(ScrollableList,{scrollKey:\"domain_blocks\",onLoadMore:()=>handleLoadMore(dispatch),hasMore:hasMore,emptyMessage:emptyMessage},void 0,domains.map(domain=>/*#__PURE__*/_jsx(Domain,{domain:domain},domain))));};export default DomainBlocks;"],"names":["messages","blockDomainConfirm","unblockDomain","_ref","domain","dispatch","intl","useIntl","className","active","src","title","formatMessage","onClick","heading","handleLoadMore","leading","domains","state","domain_lists","getIn","hasMore","emptyMessage","id","defaultMessage","icon","label","scrollKey","onLoadMore","map"],"sourceRoot":""}